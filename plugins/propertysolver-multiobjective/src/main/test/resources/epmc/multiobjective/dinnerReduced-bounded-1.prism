mdp


const int stepN;

const int home = 0;
const int italianRestaurant = home + 1;
const int pizzaPlace = italianRestaurant + 1;
const int groceryStore = pizzaPlace + 1;

const int noAction = 0;

const int eatPizza = noAction + 1;

const int actN = eatPizza;

module dinner
	running : bool init true;
	place : [home..groceryStore] init home;
	sated : bool init false;
	readyToEatPizza : bool init false;
	hasIngredientsForPizza : bool init false;
	kitchenClean : bool init true;
	act : [noAction..actN] init noAction;
	step : [0..stepN] init 0;

	[driveHomeItalianRestaurant] running & (step < stepN) & (place = home) -> 
					1 : (step' = step + 1) & (place' = italianRestaurant) & (act' = noAction);
	[driveHomePizzaPlace] running & (step < stepN) & (place = home) -> 
					1 : (step' = step + 1) & (place' = pizzaPlace) & (act' = noAction);
	[driveHomeGroceryStore] running & (step < stepN) & (place = home) -> 
					1 : (step' = step + 1) & (place' = groceryStore) & (act' = noAction);
	[driveItalianRestaurantHome] running & (step < stepN) & (place = italianRestaurant) -> 
					1 : (step' = step + 1) & (place' = home) & (act' = noAction);
	[driveItalianRestaurantPizzaPlace] running & (step < stepN) & (place = italianRestaurant) -> 
					1 : (step' = step + 1) & (place' = pizzaPlace) & (act' = noAction);
	[driveItalianRestaurantGroceryStore] running & (step < stepN) & (place = italianRestaurant) -> 
					1 : (step' = step + 1) & (place' = groceryStore) & (act' = noAction);
	[drivePizzaPlaceHome] running & (step < stepN) & (place = pizzaPlace) -> 
					1 : (step' = step + 1) & (place' = home) & (act' = noAction);
	[drivePizzaPlaceItalianRestaurant] running & (step < stepN) & (place = pizzaPlace) -> 
					1 : (step' = step + 1) & (place' = italianRestaurant) & (act' = noAction);
	[drivePizzaPlaceGroceryStore] running & (step < stepN) & (place = pizzaPlace) -> 
					1 : (step' = step + 1) & (place' = groceryStore) & (act' = noAction);
	[driveGroceryStoreHome] running & (step < stepN) & (place = groceryStore) -> 
					1 : (step' = step + 1) & (place' = home) & (act' = noAction);
	[driveGroceryStoreItalianRestaurant] running & (step < stepN) & (place = groceryStore) -> 
					1 : (step' = step + 1) & (place' = italianRestaurant) & (act' = noAction);
	[driveGroceryStorePizzaPlace] running & (step < stepN) & (place = groceryStore) -> 
					1 : (step' = step + 1) & (place' = pizzaPlace) & (act' = noAction);

	[eatPizza] running & (step < stepN) & readyToEatPizza -> 
					1 : (step' = step + 1) & (sated' = true) & (readyToEatPizza' = false) & (act' = eatPizza);

	[orderPizza] running & (step < stepN) & (place = italianRestaurant | place = pizzaPlace) -> 
					1 : (step' = step + 1) & (readyToEatPizza' = true) & (act' = noAction);
	[orderTakeoutPizza] running & (step < stepN) & (place = home) -> 
					1 : (step' = step + 1) & (readyToEatPizza' = true) & (act' = noAction);

	[buyIngredientsForPizza] running & (step < stepN) & (place = groceryStore) -> 
					1 : (step' = step + 1) & (hasIngredientsForPizza' = true) & (act' = noAction);

	[cookPizza] running & (step < stepN) & (place = home) & (hasIngredientsForPizza) -> 
					1 : (step' = step + 1) & (readyToEatPizza'= true) & (hasIngredientsForPizza' = false) & (kitchenClean' = false) & (act' = noAction);

	[cleanDishes] running & (step < stepN) & (place = home) -> 
					1 : (step' = step + 1) & (kitchenClean' = true) & (act' = noAction);

	[stop] true -> (running' = false);
endmodule





