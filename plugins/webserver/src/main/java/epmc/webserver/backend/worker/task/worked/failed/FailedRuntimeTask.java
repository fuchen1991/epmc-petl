package epmc.webserver.backend.worker.task.worked.failed;

import java.io.PrintWriter;
import java.io.StringWriter;

import epmc.webserver.common.TaskOperation;

/**
 * A task representing a system failed task, i.e., a task that has been finished due to runtime errors
 * @author ori
 */
public class FailedRuntimeTask extends FailedTask {
	private final String stackTrace;

	/**
	 * Create a new failed task identified by taskId for the user identified by userId
	 * @param userId the identifier of the user this task belongs to, as in the database
	 * @param taskId the identifier of this task, as in the database
	 * @param operation the operation to perform on this task, as extracted from the database
	 * @param code the error code describing the failure
	 * @param throwable the cause of the error
	 */
	public FailedRuntimeTask(int userId, int taskId, TaskOperation operation, String code, Throwable throwable) {
		super(userId, taskId, operation, code);
		StringWriter errors = new StringWriter();
		throwable.printStackTrace(new PrintWriter(errors));
		this.stackTrace = errors.toString();
	}
	
	/**
	 * Return the print of the stack trace as generated by {@linkplain Throwable#printStackTrace() printStackTrace()}
	 * @return the print of the stack trace
	 */
	public String getStackTrace() {
		return stackTrace;
	}
}
