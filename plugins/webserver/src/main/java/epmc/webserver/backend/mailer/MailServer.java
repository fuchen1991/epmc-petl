package epmc.webserver.backend.mailer;

import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import epmc.webserver.backend.BackendEngine;
import epmc.webserver.backend.worker.task.worked.failed.FailedRuntimeTask;
import epmc.webserver.backend.worker.task.worked.failed.FailedTask;

/**
 * Class for sending messages via mail.
 * The used server mail is 192.168.5.58 - mail.ios.ac.cn
 * @author ori
 */
public class MailServer {

	/**
	 * Send a notification mail containing the information from the specified {@linkplain FailedRuntimeTask runtime error} task
	 * @param task the task containing the runtime error
	 * @return false if there has been some error during the message send, true if no errors occurred. Note that this does not imply that the mail has been delivered
	 */
	public static boolean sendRuntimeErrorMail(FailedRuntimeTask task) {
		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", "192.168.5.58");//mail.ios.ac.cn");
		props.put("mail.smtp.ssl.trust", "192.168.5.58");//mail.ios.ac.cn");
		props.put("mail.smtp.port", "25");
		Session session = Session.getInstance(props,
				new javax.mail.Authenticator() {
					@Override
					protected PasswordAuthentication getPasswordAuthentication() {
						return new PasswordAuthentication(BackendEngine.mailUsername(), BackendEngine.mailPassword());
					}
				});
		try {
 
			Message message = new MimeMessage(session);
			message.setFrom(new InternetAddress(BackendEngine.mailSender()));
			message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(BackendEngine.mailReceivers(), true));
			message.setSubject("Warning: EPMC backend runtime exception");
			message.setText("Warning!\n\nA runtime exception has been generated by task " + task.getTaskId() + "\n\nThis is the stack trace:\n" + task.getStackTrace());
 
			Transport.send(message);
			
			System.out.println("Done");
 
		} catch (MessagingException e) {
			return false;
		}
		return true;
	} 

	/**
	 * Send a notification mail containing the information from the specified {@linkplain FailedRuntimeTask runtime error} task
	 * @param task the unknown task
	 * @return false if there has been some error during the message send, true if no errors occurred. Note that this does not imply that the mail has been delivered
	 */
	public static boolean sendUnknownTaskMail(FailedTask task) {
		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", "192.168.5.58");//mail.ios.ac.cn");
		props.put("mail.smtp.ssl.trust", "192.168.5.58");//mail.ios.ac.cn");
		props.put("mail.smtp.port", "25");
		Session session = Session.getInstance(props,
				new javax.mail.Authenticator() {
					@Override
					protected PasswordAuthentication getPasswordAuthentication() {
						return new PasswordAuthentication(BackendEngine.mailUsername(), BackendEngine.mailPassword());
					}
				});
		try {
 
			Message message = new MimeMessage(session);
			message.setFrom(new InternetAddress(BackendEngine.mailSender()));
			message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(BackendEngine.mailReceivers(), true));
			message.setSubject("Warning: EPMC backend unknown task generated");
			message.setText("Warning!\n\nAn unknown has been generated. Task information: " + task.toString());
 
			Transport.send(message);
			
			System.out.println("Done");
 
		} catch (MessagingException e) {
			return false;
		}
		return true;
	} 
}
