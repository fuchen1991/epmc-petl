// Workstation cluster [HHK00]
// dxp/gxn 11/01/00

dtmc

const int N = 16; // Number of workstations in each cluster
const int left_mx = N; // Number of work stations in left cluster
const int right_mx = N; // Number of work stations in right cluster

// Failure rates
const double ws_fail = 1/500; // Single workstation: average time to fail = 500 hrs
const double switch_fail = 1/4000; // Switch: average time to fail = 4000 hrs
const double line_fail = 1/5000; // Backbone: average time to fail = 5000 hrs

// Left cluster
module Left 
	
	left_n : [0..left_mx] init left_mx; // Number of workstations operational
	left : bool; // Being repaired?
	
	[startLeft] !left & (left_n<left_mx) -> 0.1 : (left'=true) + 0.9 : (left'=false);
	[repairLeft] left & (left_n<left_mx) -> 0.1 : (left'=false) & (left_n'=left_n+1) + 0.9 : (left'=true);
	[] (left_n>0) -> ((ws_fail*left_n) / 10) : (left_n'=left_n-1) + (1 - ((ws_fail*left_n) / 10)) : (left_n'=left_n);
	
endmodule

// Right cluster
module Right = Left[left_n=right_n,
                    left=right,
                    left_mx=right_mx,
                    startLeft=startRight,
                    repairLeft=repairRight ]
endmodule

// Repair unit
module Repairman
	
	r : bool; // Repairing?
	
	[startLeft]    !r -> 1 : (r'=true); // Inspect Left 
	[startRight]   !r -> 1 : (r'=true); // Inspect Right 
	[startToLeft]  !r -> 1 : (r'=true); // Inspect ToLeft
	[startToRight] !r -> 1 : (r'=true); // Inspect ToRight 
	[startLine]    !r -> 1 : (r'=true); // Inspect Line 
	
	[repairLeft]    r -> 0.2    : (r'=false) + 0.8    : (r'=true); // Repair Left 
	[repairRight]   r -> 0.2    : (r'=false) + 0.8    : (r'=true); // Repair Right
	[repairToLeft]  r -> 0.025  : (r'=false) + 0.975  : (r'=true); // Repair ToLeft
	[repairToRight] r -> 0.025  : (r'=false) + 0.975  : (r'=true); // Repair ToRight
	[repairLine]    r -> 0.0125 : (r'=false) + 0.9875 : (r'=true); // Repair Line
	
endmodule

// Line/backbone
module Line 
	
	line :   bool; // Being repaired?
	line_n : bool init true; // Working?
	
	[startLine] !line & !line_n -> 0.1 : (line'=true) + 0.9 : (line'=false);
	[repairLine] line & !line_n -> 0.1 : (line'=false) & (line_n'=true) + 0.9 : (line'=true);
	[] line_n -> (line_fail / 10) : (line_n'=false) + (1 - (line_fail / 10)) : (line_n'=true);
	
endmodule

// Left switch
module ToLeft = Line[line=toleft,
                     line_n=toleft_n,
                     line_fail=switch_fail,
                     startLine=startToLeft,
                     repairLine=repairToLeft ]
endmodule

// Right switch
module ToRight = Line[line=toright,
                      line_n=toright_n,
                      line_fail=switch_fail,
                      startLine=startToRight,
                      repairLine=repairToRight ]
endmodule

// Formulas + labels

// Minimum QoS requires 3/4 connected workstations operational
const int k = floor(0.75*N);
// left_operational_i : left_n>=i & toleft_n
// right_operational_i : right_n>=i & toright_n
// operational_i : (left_n+right_n)>=i & toleft_n & line_n & toright_n
// minimum_k : left_operational_k | right_operational_k | operational_k
formula minimum = (left_n>=k & toleft_n) | 
                  (right_n>=k & toright_n) | 
                  ((left_n+right_n)>=k & toleft_n & line_n & toright_n);
label "minimum" = (left_n>=k & toleft_n) | (right_n>=k & toright_n) | ((left_n+right_n)>=k & toleft_n & line_n & toright_n);
// premium = minimum_N
label "premium" = (left_n>=left_mx & toleft_n) | (right_n>=right_mx & toright_n) | ((left_n+right_n)>=left_mx & toleft_n & line_n & toright_n);